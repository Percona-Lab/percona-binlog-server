name: CMake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: RelWithDebInfo
  SELECTED_CC: gcc-12
  SELECTED_CXX: g++-12
  BOOST_MAJOR: 1
  BOOST_MINOR: 81
  BOOST_PATCH: 0
  BOOST_EXT: .tar.bz2

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-22.04

    steps:
    - name: Info mount
      run: mount

    - name: Info df
      run: df -h

    - name: Info compiler
      run: ${{env.SELECTED_CXX}} --version

    - name: Creating deps directory
      run: mkdir -p ${{runner.temp}}/deps

    - name: Cache boost tarball
      id: cache-boost-tarball
      uses: actions/cache@v3
      with:
        path: ${{runner.temp}}/deps/${{format('boost_{0}_{1}_{2}{3}', env.BOOST_MAJOR, env.BOOST_MINOR, env.BOOST_PATCH, env.BOOST_EXT)}}
        key: boost-tarball

    - name: Download boost libraries
      if: steps.cache-boost-tarball.outputs.cache-hit != 'true'
      working-directory: ${{runner.temp}}/deps
      run: wget --quiet ${{format('https://boostorg.jfrog.io/artifactory/main/release/{0}.{1}.{2}/source/boost_{0}_{1}_{2}{3}', env.BOOST_MAJOR, env.BOOST_MINOR, env.BOOST_PATCH, env.BOOST_EXT)}}

    - name: Unpack boost libraries
      working-directory: ${{runner.temp}}/deps
      run: tar xf ${{format('boost_{0}_{1}_{2}{3}', env.BOOST_MAJOR, env.BOOST_MINOR, env.BOOST_PATCH, env.BOOST_EXT)}}

    - uses: actions/checkout@v3

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        cmake \
          -B ${{github.workspace}}/../build-${{env.BUILD_TYPE}} \
          -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} \
          -DCMAKE_C_COMPILER=${{env.SELECTED_CC}} \
          -DCMAKE_CXX_COMPILER=${{env.SELECTED_CXX}} \
          -DBOOST_ROOT=${{runner.temp}}/deps/${{format('boost_{0}_{1}_{2}', env.BOOST_MAJOR, env.BOOST_MINOR, env.BOOST_PATCH)}}

    - name: CMake info
      run: cmake -L ${{github.workspace}}/..//build-${{env.BUILD_TYPE}}
    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/../build-${{env.BUILD_TYPE}} --config ${{env.BUILD_TYPE}} --parallel

    - name: Test
      working-directory: ${{github.workspace}}/../build-${{env.BUILD_TYPE}}
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}} --parallel
